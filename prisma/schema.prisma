// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  STUDY
  HOBBY
  PROJECT
  DELIVERY
  ROOMMATE
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  OPEN
  CLOSED
}

enum RoomType {
  GROUP
  PRIVATE
}

model User {
  id              String @id @default(uuid())
  sub             String @unique  
  email           String
  name            String
  studentId       String
  age             Int?
  gender          String?
  
  posts           Post[]   @relation("UserPosts")
  joinedPosts     Post[]   @relation("PostParticipants")
  
  connectedUsers  ConnectedUser[] @relation("ChatUser")
  joinedRooms     Room[]   @relation("RoomMembers")
  hostedRooms     Room[]   @relation("RoomHost")
  messages        Message[] @relation("UserMessages")
  
  status          UserStatus @default(ACTIVE)
}

model Post {
  id              String @id @default(uuid())
  title           String?
  content         String 
  type            PostType 
  roommateDetails RoommateDetails? @relation("RoommateDetails")
  tags            String[]
  author          User @relation("UserPosts", fields: [authorId], references: [id])
  authorId        String
  participants    User[]  @relation("PostParticipants")
  maxParticipants Int
  createdAt       DateTime @default(now())
  deadline        DateTime?
  status          PostStatus @default(OPEN)
}

model RoommateDetails {
  id              String @id @default(uuid())
  age             Int
  gender          String
  grade           Int
  room            String
  semester        String
  refrigerator    Boolean
  wifi            Boolean 
  snoring         Boolean
  smoking         Boolean
  sleepTime       String?
  wakeUpTime      String?
  mbti            String?
  rmRefrigerator  Boolean?
  rmWifi          Boolean?
  rmSnoring       Boolean?
  rmSmoking       Boolean?
  
  post            Post @relation("RoommateDetails", fields: [postId], references: [id])
  postId          String @unique
}

model ConnectedUser {
  id        String @id @default(uuid())
  user      User   @relation("ChatUser", fields: [userId], references: [id])
  userId    String  
  socketId  String @unique
  joinedAt  DateTime @default(now())
}

model Message {
  id        String @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  room      Room @relation("RoomMessages", fields: [roomId], references: [id])
  roomId    String
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
}

model Room {
  id        String @id @default(uuid())
  host      User   @relation("RoomHost", fields: [hostId], references: [id])
  hostId    String
  name      String
  roomType  RoomType
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
  members   User[] @relation("RoomMembers")
  messages  Message[] @relation("RoomMessages")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
